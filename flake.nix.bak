{
  description = "Application packaged using poetry2nix";

  inputs = {
    flake-utils.url = "github:numtide/flake-utils";
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    poetry2nix = {
      url = "github:nix-community/poetry2nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils,
    poetry2nix,
  }:
    flake-utils.lib.eachDefaultSystem (system: let
      # see https://github.com/nix-community/poetry2nix/tree/master#api for more functions and examples.
      pkgs = nixpkgs.legacyPackages.${system};
      lib = nixpkgs.lib;
      inherit (poetry2nix.lib.mkPoetry2Nix {inherit pkgs;}) mkPoetryApplication mkPoetryEnv overrides;
    in {
      packages = {
        upciti = mkPoetryEnv {
          projectDir = ./.;
          python = pkgs.python312;
        };
        default = self.packages.${system}.upciti;
      };

      # Shell for app dependencies.
      #
      #     nix develop
      #
      # Use this shell for developing your app.
      devShells.default = self.packages.${system}.upciti.env.overrideAttrs (oldAttrs: {
        groups = ["dev"];
        buildInputs = [
          pkgs.docker
          pkgs.docker-compose
          pkgs.black
          pkgs.pyright
          pkgs.ruff
          pkgs.isort
        ];
        shellHook = ''
          export VIRTUAL_ENV=mergify
          export VIRTUAL_ENV_NAME=mergify

          export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH
          export PYTHONPATH="./src:$PYTHONPATH"
        '';
        NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [
          pkgs.stdenv.cc.cc
        ];
      });
      # };

      # Shell for poetry.
      #
      #     nix develop .#poetry
      #
      # Use this shell for changes to pyproject.toml and poetry.lock.
      devShells.poetry = pkgs.mkShell {
        buildInputs = [pkgs.poetry];
        inputsFrom = [self.packages.${system}.upciti];
        shellHook = ''
          export VIRTUAL_ENV=mergify
          export VIRTUAL_ENV_NAME=mergify-poetry
        '';
      };
    });
}
